from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.db import transaction
import os


class Command(BaseCommand):
    help = '–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö + –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ XML + —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--xml-file',
            type=str,
            default='topcvetok_xml.xml',
            help='–ü—É—Ç—å –∫ XML —Ñ–∞–π–ª—É (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ app)'
        )
        parser.add_argument(
            '--max-products',
            type=int,
            default=1000,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'
        )
        parser.add_argument(
            '--skip-images',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        )

    def handle(self, *args, **options):
        self.stdout.write('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...')
        
        try:
            with transaction.atomic():
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ XML —Å —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ CSV
                self.stdout.write('\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ XML —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ CSV...')
                xml_file = options['xml_file']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                if not os.path.exists(xml_file):
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è  XML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {xml_file}')
                    )
                    self.stdout.write('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...')
                else:
                    max_products = options['max_products']
                    download_images = not options.get('skip_images', False)
                    
                    call_command(
                        'load_products_with_images',
                        xml_file=xml_file,
                        max_products=max_products,
                        download_images=download_images
                    )
                    self.stdout.write(self.style.SUCCESS('‚úÖ –¢–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'))
                
                self.stdout.write('\nüéâ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
                self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
                self.print_statistics()
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}')
            )
            raise

    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        from topcvetok.models import Category, Attribute, Product, Service, DeliveryMethod, PaymentMethod
        
        try:
            categories_count = Category.objects.count()
            attributes_count = Attribute.objects.count()
            products_count = Product.objects.count()
            services_count = Service.objects.count()
            delivery_methods_count = DeliveryMethod.objects.count()
            payment_methods_count = PaymentMethod.objects.count()
            
            self.stdout.write(f'üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count}')
            self.stdout.write(f'üè∑Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã: {attributes_count}')
            self.stdout.write(f'üõçÔ∏è –¢–æ–≤–∞—Ä—ã: {products_count}')
            self.stdout.write(f'üîß –£—Å–ª—É–≥–∏: {services_count}')
            self.stdout.write(f'üöö –°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_methods_count}')
            self.stdout.write(f'üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: {payment_methods_count}')
            
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}')
